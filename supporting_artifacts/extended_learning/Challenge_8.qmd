---
title: "Challenge 8"
execute:
  echo: true
  error: true 
author: "Fiona Norton"
format: 
  html: 
    theme: "journal"
    monofont: "cursive"
    font-family: "cursive"
    code-fold: true
    code-summary: "Show code"
editor: visual
---

# Setup 
```{r}
#| include: false
library(dplyr)
library(glue)
library(stringr)
library(purrr)
library(english)
```

```{r}
xmas <- read.csv("https://www.dropbox.com/s/e584pryn8evm1gz/xmas.csv?dl=1")
```

```{r pluralize-function}
pluralize_gift <- function(gift){

gift <- case_when(str_detect(gift, "y$") ~ str_replace(gift, "y", "ies"),
                  str_detect(gift, "oo") ~ str_replace(gift, "oo", "ee"),
                  TRUE ~ str_c(gift, "s", collapse = TRUE))

return(gift)

}
```

```{r phrase-function}
make_phrase <- function(num_word, item, verb, adjective, location) {
  
  ## Step 1: Replace NAs with blank strings
  verb <- str_replace_na(verb, "")
  adjective <- str_replace_na(adjective, "")
  location <- str_replace_na(location, "")
  
  ## Step 2: If the day is larger than 1, the items need pluralized! 
  item <- ifelse(num_word != "one", pluralize_gift(item), item)
  
  ## Step 3: If the word starts with a vowel, add "an" to the beginning
  num_word <- ifelse(str_detect(item, "^(a e i o u)"), 
                     str_replace(num_word, "one", "an"), 
                     str_replace(num_word, "one", "a"))
  
  ## Step 4: Glue all of the pieces together! 
  phrase <- glue::glue("{num_word} {adjective} {item} {verb} {location}")
  
  return(str_squish(phrase))
  
}
```

```{r xmas2}
xmas2 <- xmas %>%
  mutate(day.num = as.character(english::english(Day)
                                ), 
    Full.Phrase = pmap_chr(
      list(num_word = day.num,
           item = Gift.Item,
           verb = Verb,
           adjective = Adjective,
           location = Location),
      make_phrase
      )
  )
```


# Singing the Song 

```{r}
# Produces the string for one day of the song.
# Arguments -- dataset -- A data frame containing information about gifts
# Arguments -- line -- The number of the line for the day you want to sing about
# Arguments -- phrase_col -- The variable name for the column in the dataset that contains the song phrases
# Return -- A string singing the line of the song with all gifts for the given day.

sing_day <- function(dataset, line, phrase_col){
  
  # Step 1: Setup the intro line
  num_word <- ordinal(line)
  
  intro <- glue::glue("On the {num_word} day of Christmas")
  
  # Step 2: Sing the gift phrases

    phrases <- dataset |>
      pull( {{phrase_col}} )
    
    song_phrases <- glue_collapse(phrases[line:1], 
                                  sep = ", \n",
                                  last = " and \n"
                                  )
  
    
  ## put it together
    
  full_intro <- glue::glue("{intro} my true love gave to me:")
  
  song <- glue::glue("{full_intro} \n {song_phrases}.")
  
  return(song)

}
```

# The 12 Days of Christmas

```{r}
map_chr(1:12, ~ sing_day(xmas2, .x, Full.Phrase)) |>
  str_c(collapse = "\n \n") |>
  cat()
```














